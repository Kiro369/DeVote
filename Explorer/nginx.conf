# the number of worker processes of nginx's master process.
worker_processes  1;

events {
    # the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/json;

    log_format  main  '$remote_addr:$remote_port ||  $server_addr:$server_port - $remote_user [$time_local]  "$scheme $request " '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    # disable keep-alive client connections.
    keepalive_timeout  0;

    # define a group of nodes running explorer server that can be referenced by the proxy_pass directive.
    upstream backend  {
        # weight : the number of subsequent requests that will be directed to the server.
        server 192.168.1.4:9000  weight=5;
        server 192.168.1.5:9000  max_fails=1 fail_timeout=30s;

        # max_fails : the number of failed attempts to communicate with the server to consider it unavailable
        # fail_timeout: the period of time the server will be considered unavailable.
        #server 192.168.1.6:9000 max_fails=1 fail_timeout=30s;

        # down : marks the server as a down server.
        #server 192.168.1.7:9000 backup;

        # backup : marks the server as a backup server. It will be passed requests when the primary servers are unavailable.
        #server 192.168.1.8:9000 backup;
    }

    server {
        listen       80;
        # listen 443 ssl;
        
        # IP of the virtual server by which frontend will access api through.
        server_name  192.168.1.4;

        gzip on;
        gzip_types      application/json;
        
        # ssl_certificate         ./ssl/server.crt;
        # ssl_certificate_key     ./ssl/server.key;

        # allow only GET HTTP methods and deny other methods.
        if ($request_method ~ ^(POST|PATCH|TRACE)$) { 
            return 405 '{"code": 405 , "message": "Forbidden"}';
		}

        location / {
            # forward and distribute requests to backend servers in a round-robin fashion.
            proxy_pass http://backend;
            allow 192.168.1.0/24;	
            # timeout for establishing a connection with a backend server. 
            proxy_connect_timeout 4s;
        }

        # send json error message when no server are up.      
        error_page 500 502 503 504 =500 @backend_down;

        location @backend_down {
            default_type application/json;
            return 500 '{"code": 500 , "message": "Internal Server Error"}';
        }
    }
}
